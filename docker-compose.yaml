services:
  redis:
    image: redis
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      start_period: 1m
      start_interval: 5s
      interval: 30s
      timeout: 30s
      retries: 3

  api-delivery:
    build: ./api-delivery
    container_name: api-delivery
    ports:
      - "8001:8001"
    environment:
      - RMQ_URL=${RMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy

  api:
    build: ./api
    container_name: api-core
    ports:
      - "8000:8000"
    environment:
      - CACHE_REFLESH_SEC=${CACHE_REFLESH_SEC}
      - REDIS_ADDR=${REDIS_ADDR}
      - DB_HOST=${POSTGRESQL_ADDON_HOST}
      - DB_PORT=${POSTGRESQL_ADDON_PORT}
      - DB_NAME=${POSTGRESQL_ADDON_DB}
      - DB_USER=${POSTGRESQL_ADDON_USER}
      - DB_PASSWORD=${POSTGRESQL_ADDON_PASSWORD}
      - RMQ_URL=${RMQ_URL}
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
  # migrate:
  #   condition: service_completed_successfully

  #  Metrics collector.
  #  It scrapes targets defined in --promscrape.config
  #  And forward them to --remoteWrite.url
  vmagent:
    container_name: vmagent
    image: victoriametrics/vmagent:v1.109.0
    depends_on:
      - "victoriametrics"
    ports:
      - 8429:8429
    volumes:
      - vmagentdata:/vmagentdata
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
      - "--remoteWrite.url=http://victoriametrics:8428/api/v1/write"
    restart: always

  # VictoriaMetrics instance, a single process responsible for
  # storing metrics and serve read requests.
  victoriametrics:
    container_name: victoriametrics
    image: victoriametrics/victoria-metrics:v1.109.0
    ports:
      - 8428:8428
      - 8089:8089
      - 8089:8089/udp
      - 2003:2003
      - 2003:2003/udp
      - 4242:4242
    volumes:
      - vmdata:/storage
    command:
      - "--storageDataPath=/storage"
      - "--graphiteListenAddr=:2003"
      - "--opentsdbListenAddr=:4242"
      - "--httpListenAddr=:8428"
      - "--influxListenAddr=:8089"
      - "--vmalert.proxyURL=http://vmalert:8880"
    restart: always

  # Grafana instance configured with VictoriaMetrics as datasource
  grafana:
    container_name: grafana
    image: grafana/grafana:10.4.2
    depends_on:
      - "victoriametrics"
    ports:
      - 3000:3000
    volumes:
      - grafanadata:/var/lib/grafana
      - ./provisioning/datasources/prometheus-datasource/single.yml:/etc/grafana/provisioning/datasources/single.yml
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./dashboards/victoriametrics.json:/var/lib/grafana/dashboards/vm.json
      - ./dashboards/vmagent.json:/var/lib/grafana/dashboards/vmagent.json
      # - ./dashboards/vmalert.json:/var/lib/grafana/dashboards/vmalert.json
    # networks:
    #   - vm_net
    restart: always

  # # vmalert executes alerting and recording rules
  # vmalert:
  #   container_name: vmalert
  #   image: victoriametrics/vmalert:v1.109.0
  #   depends_on:
  #     - "victoriametrics"
  #     - "alertmanager"
  #   ports:
  #     - 8880:8880
  #   volumes:
  #     - ./rules/alerts.yml:/etc/alerts/alerts.yml
  #     - ./rules/alerts-health.yml:/etc/alerts/alerts-health.yml
  #     - ./rules/alerts-vmagent.yml:/etc/alerts/alerts-vmagent.yml
  #     - ./rules/alerts-vmalert.yml:/etc/alerts/alerts-vmalert.yml
  #   command:
  #     - "--datasource.url=http://victoriametrics:8428/"
  #     - "--remoteRead.url=http://victoriametrics:8428/"
  #     - "--remoteWrite.url=http://vmagent:8429/"
  #     - "--notifier.url=http://alertmanager:9093/"
  #     - "--rule=/etc/alerts/*.yml"
  #     # display source of alerts in grafana
  #     - "--external.url=http://127.0.0.1:3000" #grafana outside container
  #     - '--external.alert.source=explore?orgId=1&left={"datasource":"VictoriaMetrics","queries":[{"expr":{{.Expr|jsonEscape|queryEscape}},"refId":"A"}],"range":{"from":"{{ .ActiveAt.UnixMilli }}","to":"now"}}'
  #   restart: always

  # # alertmanager receives alerting notifications from vmalert
  # # and distributes them according to --config.file.
  # alertmanager:
  #   container_name: alertmanager
  #   image: prom/alertmanager:v0.27.0
  #   volumes:
  #     - ./alertmanager.yml:/config/alertmanager.yml
  #   command:
  #     - "--config.file=/config/alertmanager.yml"
  #   ports:
  #     - 9093:9093
  #   restart: always

volumes:
  vmagentdata: {}
  vmdata: {}
  grafanadata: {}
# migrate:
#   image: migrate/migrate
#   command:
#     ["-path", "/migrations", "-database", "${POSTGRESQL_ADDON_URI}", "up"]
#   volumes:
#     - ./migrations:/migrations
